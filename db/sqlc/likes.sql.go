// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: likes.sql

package db

import (
	"context"
	"database/sql"
)

const checkLiked = `-- name: CheckLiked :one
SELECT EXISTS (
  SELECT 1 FROM likes WHERE user_id = $1 AND post_id = $2
)
`

type CheckLikedParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	PostID sql.NullInt32 `json:"post_id"`
}

func (q *Queries) CheckLiked(ctx context.Context, arg CheckLikedParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkLiked, arg.UserID, arg.PostID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getLikeCount = `-- name: GetLikeCount :one
SELECT COUNT(*) FROM likes WHERE post_id = $1
`

func (q *Queries) GetLikeCount(ctx context.Context, postID sql.NullInt32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLikeCount, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const likePost = `-- name: LikePost :one
INSERT INTO likes (user_id, post_id) VALUES ($1, $2)
ON CONFLICT DO NOTHING
RETURNING id
`

type LikePostParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	PostID sql.NullInt32 `json:"post_id"`
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, likePost, arg.UserID, arg.PostID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const unlikePost = `-- name: UnlikePost :one
DELETE FROM likes WHERE user_id = $1 AND post_id = $2
RETURNING id
`

type UnlikePostParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	PostID sql.NullInt32 `json:"post_id"`
}

func (q *Queries) UnlikePost(ctx context.Context, arg UnlikePostParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, unlikePost, arg.UserID, arg.PostID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
