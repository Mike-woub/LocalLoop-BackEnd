// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  user_id,
  category_id,
  title,
  content,
  image_url,
  expires_at,
  latitude,
  longitude,
  location_name
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, user_id, category_id, title, content, image_url, created_at, expires_at, like_count, latitude, longitude, location_name
`

type CreatePostParams struct {
	UserID       int32           `json:"user_id"`
	CategoryID   int32           `json:"category_id"`
	Title        string          `json:"title"`
	Content      string          `json:"content"`
	ImageUrl     []string        `json:"image_url"`
	ExpiresAt    sql.NullTime    `json:"expires_at"`
	Latitude     sql.NullFloat64 `json:"latitude"`
	Longitude    sql.NullFloat64 `json:"longitude"`
	LocationName sql.NullString  `json:"location_name"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.UserID,
		arg.CategoryID,
		arg.Title,
		arg.Content,
		pq.Array(arg.ImageUrl),
		arg.ExpiresAt,
		arg.Latitude,
		arg.Longitude,
		arg.LocationName,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Title,
		&i.Content,
		pq.Array(&i.ImageUrl),
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.LikeCount,
		&i.Latitude,
		&i.Longitude,
		&i.LocationName,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :one
DELETE FROM posts 
WHERE id = $1 AND user_id = $2
RETURNING id
`

type DeletePostParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, deletePost, arg.ID, arg.UserID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getCertainPost = `-- name: GetCertainPost :one
SELECT 
  posts.id,
  posts.user_id,
  users.username,
  posts.title,
  posts.content,
  posts.image_url,
  posts.category_id,
  categories.name AS category_name,
  posts.latitude,
  posts.longitude,
  posts.location_name
FROM posts
JOIN categories ON posts.category_id = categories.id
JOIN users ON posts.user_id = users.id
WHERE posts.id = $1
`

type GetCertainPostRow struct {
	ID           int32           `json:"id"`
	UserID       int32           `json:"user_id"`
	Username     string          `json:"username"`
	Title        string          `json:"title"`
	Content      string          `json:"content"`
	ImageUrl     []string        `json:"image_url"`
	CategoryID   int32           `json:"category_id"`
	CategoryName string          `json:"category_name"`
	Latitude     sql.NullFloat64 `json:"latitude"`
	Longitude    sql.NullFloat64 `json:"longitude"`
	LocationName sql.NullString  `json:"location_name"`
}

func (q *Queries) GetCertainPost(ctx context.Context, id int32) (GetCertainPostRow, error) {
	row := q.db.QueryRowContext(ctx, getCertainPost, id)
	var i GetCertainPostRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Title,
		&i.Content,
		pq.Array(&i.ImageUrl),
		&i.CategoryID,
		&i.CategoryName,
		&i.Latitude,
		&i.Longitude,
		&i.LocationName,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT 
  posts.id,
  posts.user_id,
  users.username,
  posts.title,
  posts.content,
  posts.image_url,
  posts.category_id,
  categories.name AS category_name,
  posts.latitude,
  posts.longitude,
  posts.location_name
FROM posts
JOIN categories ON posts.category_id = categories.id
JOIN users ON posts.user_id = users.id
`

type GetPostsRow struct {
	ID           int32           `json:"id"`
	UserID       int32           `json:"user_id"`
	Username     string          `json:"username"`
	Title        string          `json:"title"`
	Content      string          `json:"content"`
	ImageUrl     []string        `json:"image_url"`
	CategoryID   int32           `json:"category_id"`
	CategoryName string          `json:"category_name"`
	Latitude     sql.NullFloat64 `json:"latitude"`
	Longitude    sql.NullFloat64 `json:"longitude"`
	LocationName sql.NullString  `json:"location_name"`
}

func (q *Queries) GetPosts(ctx context.Context) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Title,
			&i.Content,
			pq.Array(&i.ImageUrl),
			&i.CategoryID,
			&i.CategoryName,
			&i.Latitude,
			&i.Longitude,
			&i.LocationName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
