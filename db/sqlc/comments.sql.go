// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: comments.sql

package db

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (post_id, user_id, content, created_at ) VALUES(
    $1,$2,$3,$4
) RETURNING id, post_id, user_id, content, created_at
`

type CreateCommentParams struct {
	PostID    int32     `json:"post_id"`
	UserID    int32     `json:"user_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.PostID,
		arg.UserID,
		arg.Content,
		arg.CreatedAt,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getComments = `-- name: GetComments :many
SELECT 
  c.content, 
  c.created_at, 
  u.username
FROM comments c
JOIN users u ON c.user_id = u.id
WHERE c.post_id = $1
`

type GetCommentsRow struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Username  string    `json:"username"`
}

func (q *Queries) GetComments(ctx context.Context, postID int32) ([]GetCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getComments, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsRow
	for rows.Next() {
		var i GetCommentsRow
		if err := rows.Scan(&i.Content, &i.CreatedAt, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
